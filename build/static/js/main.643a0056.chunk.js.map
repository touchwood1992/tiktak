{"version":3,"sources":["components/boxItem.js","App.js","serviceWorker.js","index.js"],"names":["BoxItem","props","icon","click","activeClass","iconToShow","className","onClick","App","useState","boxes","Array","fill","currentPlayer","winnerPlayer","isTie","state","setState","useEffect","winnerArray","player1","forEach","el","i","push","player2","find","ar","every","includes","isWinner","e","toast","error","position","POSITION","BOTTOM_CENTER","checkWinner","showWinner","success","map","b","index","key","itemIndex","copyBoxesFromState","swithchPlayer","clickItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.643a0056.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaRegCircle, FaRegEdit } from \"react-icons/fa\";\r\n\r\nconst BoxItem = (props) => {\r\n  const { icon, click, activeClass } = props;\r\n  let iconToShow = null;\r\n  switch (icon) {\r\n    case \"one\":\r\n      iconToShow = <FaTimes />;\r\n      break;\r\n    case \"two\":\r\n      iconToShow = <FaRegCircle />;\r\n      break;\r\n\r\n    default:\r\n      iconToShow = <FaRegEdit />;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={`col-4  cell-content ${activeClass}`} onClick={click}>\r\n      {iconToShow}\r\n    </div>\r\n  );\r\n};\r\nexport default BoxItem;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./style.css\";\nimport BoxItem from \"./components/boxItem\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nconst App = () => {\n  //You can use multiple states over here\n  const [state, setState] = useState({\n    boxes: new Array(9).fill(\"\"),\n    currentPlayer: \"one\",\n    winnerPlayer: null,\n    isTie: null,\n  });\n\n  useEffect(() => {\n    //Check winner\n    checkWinner();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.boxes]);\n\n  useEffect(() => {\n    //Check winner\n    showWinner();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.winnerPlayer]);\n\n  const clickItem = (itemIndex) => {\n    if (state.winnerPlayer) {\n      setState({\n        ...state,\n      });\n      return;\n    }\n\n    if (state.boxes[itemIndex] === \"\") {\n      //Copy boxes from state\n      const copyBoxesFromState = [...state.boxes];\n      //Fill this value to box\n      copyBoxesFromState[itemIndex] = state.currentPlayer;\n\n      //swithch player\n      const swithchPlayer = state.currentPlayer === \"one\" ? \"two\" : \"one\";\n\n      //Set new state\n      setState({\n        ...state,\n        boxes: copyBoxesFromState,\n        currentPlayer: swithchPlayer,\n      });\n    } else {\n      //Show warning that please choose another one\n      toast.error(\"You have already selected it!\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  function checkWinner() {\n    //winner array\n    const winnerArray = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    //Get player1 entries from state\n    let player1 = [];\n    state.boxes.forEach((el, i) => {\n      if (el === \"one\") {\n        player1.push(i);\n      }\n    });\n\n    //Get player1 entries from state\n    let player2 = [];\n    state.boxes.forEach((el, i) => {\n      if (el === \"two\") {\n        player2.push(i);\n      }\n    });\n\n    //Check player1 entries matches from state\n    let player1Winner = winnerArray.find((ar) => {\n      return ar.every((el) => player1.includes(el));\n    });\n\n    if (player1Winner) {\n      setState({\n        ...state,\n        isWinner: true,\n        winnerPlayer: \"one\",\n      });\n      return;\n    }\n\n    //Check player2 entries matches from state\n    let player2Winner = winnerArray.find((ar) => {\n      return ar.every((el) => player2.includes(el));\n    });\n\n    if (player2Winner) {\n      setState({\n        ...state,\n        isWinner: true,\n        winnerPlayer: \"two\",\n      });\n      return;\n    }\n\n    if (state.boxes.every((e) => e !== \"\")) {\n      setState({\n        boxes: new Array(9).fill(\"\"),\n        currentPlayer: \"one\",\n        winnerPlayer: null,\n        isTie: null,\n      });\n\n      toast.error(`Game Tie...`, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  }\n\n  const showWinner = () => {\n    //Show toast for winner\n    if (state.winnerPlayer) {\n      toast.success(`Player ${state.winnerPlayer} won`, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const playAgain = () => {\n    setState({\n      boxes: new Array(9).fill(\"\"),\n      currentPlayer: \"one\",\n      winnerPlayer: null,\n      isTie: null,\n    });\n  };\n\n  return (\n    <div className=\"container game-container\">\n      <ToastContainer />\n      <h3 className=\"text-uppecase mb-3\">Play tiktak Game...</h3>\n      {state.winnerPlayer || state.isTie ? (\n        <button\n          className=\"btn btn-danger d-block play-again\"\n          onClick={playAgain}\n        >\n          Play Again?\n        </button>\n      ) : (\n        \"\"\n      )}\n      <div className=\"row\">\n        {state.boxes.map((b, index, ar) => (\n          <BoxItem\n            activeClass={\n              b === \"one\" ? \"active-class\" : b === \"two\" ? \"green-class\" : \"\"\n            }\n            key={index}\n            icon={b}\n            click={() => clickItem(index)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}